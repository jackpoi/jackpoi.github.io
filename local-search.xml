<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Crack Sublime Text</title>
    <link href="/2023/11/17/Crack-Sublime-Text/"/>
    <url>/2023/11/17/Crack-Sublime-Text/</url>
    
    <content type="html"><![CDATA[<h1 id="Crack-Sublime-Text"><a href="#Crack-Sublime-Text" class="headerlink" title="Crack Sublime Text"></a>Crack Sublime Text</h1><h2 id="Crack"><a href="#Crack" class="headerlink" title="Crack"></a>Crack</h2><h3 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h3><ol><li>下载 Sublime Text，安装版、便携版都可以。</li><li>安装之后打开安装目录，找到 sublime_text.exe 文件，Mac 和 Linux 找到对应的 sublime_text 文件。</li><li>打开<a href="https://hexed.it/">HexEd.it</a>网站，将上面的文件打开。</li></ol><h3 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h3><ol><li>打开文件后搜索 <code>80 78 05 00 0F 94 C1</code>，并找到所在位置。</li><li>将 <code>C6 40 05 01 48 85 C9</code> 作为十六进制覆盖掉上面的内容。</li><li>保存文件，并覆盖掉原来的 sublime_text 文件。</li><li>完成。</li></ol><h3 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h3><ol><li><p>打开文件后搜索 <code>41 57 41 56 56 57 55 53 B8 28 21 00 00</code>，并找到所在位置。</p></li><li><p>将 <code>33 C0 FE C0 C3 57 55 53 B8 28 21 00 00</code> 作为十六进制覆盖掉上面的内容。</p></li><li><p>搜索 <code>6C 69 63 65 6E 73 65 2E 73 75 62 6C 69 6D 65 68 71 2E 63 6F 6D</code>，并找到所在位置。</p></li><li><p>将 <code>73 75 62 6C 69 6D 65 68 71 2E 6C 6F 63 61 6C 68 6F 73 74 00 00</code> 作为十六进制覆盖掉上面的内容。</p></li><li><p>保存文件，并覆盖掉原来的 sublime_text 文件。</p></li><li><p>启动软件，并填入以下 License：</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs maxima">&#123;User Name&#125;(此处可自定义用户名)<br>Unlimited User License<br>EA7E-<span class="hljs-number">81044230</span><br><span class="hljs-number">0C0CD4A8</span> CAA317D9 CCABD1AC 434C984C<br>7E4A0B13 77893C3E DD0A5BA1 B2EB721C<br>4BAAB4C4 9B96437D 14EB743E 7DB55D9C<br>7CA26EE2 67C3B4EC 29B2C65A 88D90C59<br>CB6CCBA5 7DE6177B C02C2826 8C9A21B0<br>6AB1A5B6 20B09EA2 <span class="hljs-number">01C979BD</span> <span class="hljs-number">29670B19</span><br>92DC6D90 <span class="hljs-number">6E365849</span> 4AB84739 5B4C3EA1<br><span class="hljs-number">048CC1D0</span> 9748ED54 CAC9D585 90CAD815<br></code></pre></td></tr></table></figure></li><li><p>完成。</p></li></ol><h2 id="设置"><a href="#设置" class="headerlink" title="设置"></a>设置</h2><ol><li><p>修改配置文件及插件路径路径</p><blockquote><p>在安装目录下新建 <code>Data</code> 文件夹，之后重启软件</p></blockquote></li><li><p>安装插件</p><blockquote><ol><li>按下 <code>Ctrl+Shift+P</code> 快捷键，找到 <code>Install Package Control</code> 选项，安装插件管理工具</li><li>安装成功后，再次按下 <code>Ctrl+Shift+P</code> 快捷键，找到 <code>Install Package</code> 选项，输入需要安装的插件，回车安装</li></ol></blockquote></li><li><p>常用插件</p><p><a href="https://packagecontrol.io/">Sublime Text 插件仓库地址</a></p><ul><li>LocalizedMenu - 本地化菜单，包含多种语言</li><li>Pretty JSON - JSON 格式化工具</li><li>Solarized Color Scheme - Solarized 主题</li></ul></li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>crack</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Docker 部署 alist</title>
    <link href="/2023/11/13/Docker-%E9%83%A8%E7%BD%B2-alist/"/>
    <url>/2023/11/13/Docker-%E9%83%A8%E7%BD%B2-alist/</url>
    
    <content type="html"><![CDATA[<h1 id="Docker-部署-alist"><a href="#Docker-部署-alist" class="headerlink" title="Docker 部署 alist"></a>Docker 部署 alist</h1><blockquote><p><a href="https://alist.nn.ci/zh/guide/install/docker.html">https://alist.nn.ci/zh/guide/install/docker.html</a></p></blockquote><ol><li><p>新建 docker-compose.yml 文件</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">version:</span> <span class="hljs-string">&#x27;3.28&#x27;</span><br><span class="hljs-attr">services:</span><br>    <span class="hljs-attr">alist:</span><br>        <span class="hljs-attr">restart:</span> <span class="hljs-string">always</span><br>        <span class="hljs-attr">volumes:</span><br>        <span class="hljs-comment"># 配置文件映射</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">&#x27;/etc/alist/data:/opt/alist/data&#x27;</span><br>            <span class="hljs-comment"># 本地存储映射</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">&#x27;/etc/alist/storage:/opt/alist/storage&#x27;</span><br>        <span class="hljs-attr">ports:</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">&#x27;5244:5244&#x27;</span><br>        <span class="hljs-attr">environment:</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">PUID=0</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">PGID=0</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">UMASK=022</span><br>        <span class="hljs-attr">container_name:</span> <span class="hljs-string">alist</span><br>        <span class="hljs-attr">image:</span> <span class="hljs-string">&#x27;xhofe/alist:latest&#x27;</span><br></code></pre></td></tr></table></figure><p>其中<code>本地存储映射</code>是由于docker搭建的alist的本机存储选项是按docker的环境配置的，将其映射到本机文件夹，就可以在docker中配置本机存储，并映射到宿主机中。</p></li><li><p>启动 docker</p><p>在 docker-compose.yml 目录下运行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo docker compose up -d<br></code></pre></td></tr></table></figure></li><li><p>设置管理员密码</p><p>3.25.0 以上版本将密码改成加密方式存储的hash值，无法直接反算出密码，如果忘记了密码只能通过重新 <strong><code>随机生成</code></strong> 或者 <strong><code>手动设置</code></strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 随机生成一个密码</span><br>sudo docker <span class="hljs-built_in">exec</span> -it alist ./alist admin random<br><span class="hljs-comment"># 手动设置一个密码,`NEW_PASSWORD`是指你需要设置的密码</span><br>sudo docker <span class="hljs-built_in">exec</span> -it alist ./alist admin <span class="hljs-built_in">set</span> NEW_PASSWORD<br></code></pre></td></tr></table></figure></li><li><p>查看 alist 版本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo docker <span class="hljs-built_in">exec</span> -it alist ./alist version<br></code></pre></td></tr></table></figure></li><li><p>添加本机存储</p><p>配置本机存储时，要将<code>根文件夹路径</code>设置为 docker-compose.yml 映射的目录：<code>/opt/alist/storage</code>。</p></li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>docker</tag>
      
      <tag>alist</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Ubuntu 安装 Docker Engine</title>
    <link href="/2023/11/13/Ubuntu-%E5%AE%89%E8%A3%85-Docker-Engine/"/>
    <url>/2023/11/13/Ubuntu-%E5%AE%89%E8%A3%85-Docker-Engine/</url>
    
    <content type="html"><![CDATA[<h1 id="Ubuntu-安装-Docker-Engine"><a href="#Ubuntu-安装-Docker-Engine" class="headerlink" title="Ubuntu 安装 Docker Engine"></a>Ubuntu 安装 Docker Engine</h1><blockquote><p>以Ubuntu 20.04为例</p><p><a href="https://docs.docker.com/engine/install/ubuntu/">Install Docker Engine on Ubuntu | Docker Docs</a></p></blockquote><h2 id="卸载旧版本"><a href="#卸载旧版本" class="headerlink" title="卸载旧版本"></a>卸载旧版本</h2><p>要卸载的非官方软件包有<code>docker.io</code>，<code>docker-compose</code>，<code>docker-compose-v2</code>，<code>docker-doc</code>，<code>podman-docker</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-keyword">for</span> pkg <span class="hljs-keyword">in</span> docker.io docker-doc docker-compose docker-compose-v2 podman-docker containerd runc; <span class="hljs-keyword">do</span> sudo apt-get remove <span class="hljs-variable">$pkg</span>; <span class="hljs-keyword">done</span><br></code></pre></td></tr></table></figure><h2 id="通过-apt-进行安装"><a href="#通过-apt-进行安装" class="headerlink" title="通过 apt 进行安装"></a>通过 apt 进行安装</h2><p>由于 apt 源使用 HTTPS 以确保软件下载过程中不被篡改。因此，我们首先需要添加使用 HTTPS 传输的软件包以及 CA 证书。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 为了确认所下载软件包的合法性，需要添加软件源的GPG密钥</span><br>sudo apt-get update<br>sudo apt-get install ca-certificates curl gnupg<br>sudo install -m 0755 -d /etc/apt/keyrings<br>curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg<br>sudo <span class="hljs-built_in">chmod</span> a+r /etc/apt/keyrings/docker.gpg<br></code></pre></td></tr></table></figure><p>添加docker的软件源，并不是docker hub的源，而是docker这个软件的源。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 将官方源添加到apt仓库</span><br><span class="hljs-built_in">echo</span> \<br>  <span class="hljs-string">&quot;deb [arch=&quot;</span>$(dpkg --print-architecture)<span class="hljs-string">&quot; signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu \</span><br><span class="hljs-string">  &quot;</span>$(. /etc/os-release &amp;&amp; <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;<span class="hljs-variable">$VERSION_CODENAME</span>&quot;</span>)<span class="hljs-string">&quot; stable&quot;</span> | \<br>  sudo <span class="hljs-built_in">tee</span> /etc/apt/sources.list.d/docker.list &gt; /dev/null<br></code></pre></td></tr></table></figure><p>国内服务器由于网络问题，下载的会很慢，推荐使用[清华源](<a href="https://mirrors.tuna.tsinghua.edu.cn/help/docker-ce/">docker-ce | 镜像站使用帮助 | 清华大学开源软件镜像站 | Tsinghua Open Source Mirror</a>)进行安装：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">echo</span> \<br>  <span class="hljs-string">&quot;deb [arch=<span class="hljs-subst">$(dpkg --print-architecture)</span> signed-by=/etc/apt/keyrings/docker.gpg] https://mirrors.tuna.tsinghua.edu.cn/docker-ce/linux/ubuntu \</span><br><span class="hljs-string">  &quot;</span>$(. /etc/os-release &amp;&amp; <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;<span class="hljs-variable">$VERSION_CODENAME</span>&quot;</span>)<span class="hljs-string">&quot; stable&quot;</span> | \<br>  sudo <span class="hljs-built_in">tee</span> /etc/apt/sources.list.d/docker.list &gt; /dev/null<br></code></pre></td></tr></table></figure><p>使用apt安装docker相关软件的最新版：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo apt-get update<br>sudo apt-get install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin<br></code></pre></td></tr></table></figure><p>查看docker版本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker --version<br></code></pre></td></tr></table></figure><h2 id="设置-docker-镜像"><a href="#设置-docker-镜像" class="headerlink" title="设置 docker 镜像"></a>设置 docker 镜像</h2><p>首先执行以下命令，查看是否在 <code>docker.service</code> 文件中配置过镜像地址。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">systemctl <span class="hljs-built_in">cat</span> docker | grep <span class="hljs-string">&#x27;\-\-registry\-mirror&#x27;</span><br></code></pre></td></tr></table></figure><p>如果该命令有输出，那么执行 <code>$ systemctl cat docker</code> 查看 <code>ExecStart=</code> 出现的位置，修改对应的文件内容去掉 <code>--registry-mirror</code> 参数及其值，并按接下来的步骤进行配置。</p><p>如果以上命令没有任何输出，那么就可以在 <code>/etc/docker/daemon.json</code> 中写入如下内容：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;registry-mirrors&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>    <span class="hljs-string">&quot;https://hub-mirror.c.163.com&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-string">&quot;https://mirror.baidubce.com&quot;</span><br>  <span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>上面是网易和百度开放的docker hub镜像，阿里云的服务器会提供一个私有的镜像地址：<a href="https://cr.console.aliyun.com/cn-hangzhou/instances">阿里云镜像源(点击管理控制台 -&gt; 左侧镜像工具 -&gt; 镜像加速器 -&gt; 复制加速器地址)</a>。</p><p>之后重新启动服务。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo systemctl daemon-reload<br>sudo systemctl restart docker<br></code></pre></td></tr></table></figure><h2 id="docker-常用命令"><a href="#docker-常用命令" class="headerlink" title="docker 常用命令"></a>docker 常用命令</h2><p>[Docker 常用命令 - 云·烟 (jackpoi.github.io)](<a href="https://jackpoi.github.io/2022/04/21/Docker">https://jackpoi.github.io/2022/04/21/Docker</a> 常用命令&#x2F;)</p>]]></content>
    
    
    <categories>
      
      <category>ubuntu</category>
      
    </categories>
    
    
    <tags>
      
      <tag>docker</tag>
      
      <tag>ubuntu</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Ubuntu 登录设置</title>
    <link href="/2023/11/12/Ubuntu%20%E7%99%BB%E5%BD%95%E8%AE%BE%E7%BD%AE/"/>
    <url>/2023/11/12/Ubuntu%20%E7%99%BB%E5%BD%95%E8%AE%BE%E7%BD%AE/</url>
    
    <content type="html"><![CDATA[<h1 id="Ubuntu-登录设置"><a href="#Ubuntu-登录设置" class="headerlink" title="Ubuntu 登录设置"></a>Ubuntu 登录设置</h1><h2 id="新建用户代替root用户"><a href="#新建用户代替root用户" class="headerlink" title="新建用户代替root用户"></a>新建用户代替root用户</h2><h3 id="创建新用户"><a href="#创建新用户" class="headerlink" title="创建新用户"></a>创建新用户</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@Ubuntu:~]<span class="hljs-comment"># useradd -m jackpoi -s /bin/bash</span><br>[root@Ubuntu:~]<span class="hljs-comment"># passwd jackpoi</span><br>New password:<br>Retype new password:<br>passwd: password updated successfully<br></code></pre></td></tr></table></figure><blockquote><p>-m: 自动建立用户的登入目录</p><p>-s: 指定用户登入后所使用的shell。默认值为&#x2F;bin&#x2F;bash</p></blockquote><p>现在可以用新用户登录系统验证是否可用。</p><h3 id="分配权限"><a href="#分配权限" class="headerlink" title="分配权限"></a>分配权限</h3><p>给创建的新用户分配sudo的权限。</p><blockquote><p>sudo允许一个已授权用户以超级用户或者其它用户的角色运行一个命令</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@Ubuntu:~]<span class="hljs-comment"># adduser jackpoi sudo</span><br>Adding user jackpoi to group sudo ...<br>Adding user jackpoi to group sudo<br>Done.<br></code></pre></td></tr></table></figure><p>现在用新用户可以执行sudo命令，但是需要输入用户密码。</p><h3 id="设置sudo免密码"><a href="#设置sudo免密码" class="headerlink" title="设置sudo免密码"></a>设置sudo免密码</h3><p>root权限的用户执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@Ubuntu:~]<span class="hljs-comment"># visudo</span><br></code></pre></td></tr></table></figure><p>或者</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@Ubuntu:~]<span class="hljs-comment"># vi /etc/sudoers</span><br></code></pre></td></tr></table></figure><p>在文件的最下方添加以下内容，如果添加到前面可能会收到其他组用户的影响。</p><figure class="highlight nsis"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs nsis"><span class="hljs-comment"># 设置用户</span><br>jackpoi <span class="hljs-literal">ALL</span>=(<span class="hljs-literal">ALL</span>:<span class="hljs-literal">ALL</span>) NOPASSWD:<span class="hljs-literal">ALL</span><br><span class="hljs-comment"># 设置 %用户组</span><br>%jackpoi <span class="hljs-literal">ALL</span>=(<span class="hljs-literal">ALL</span>:<span class="hljs-literal">ALL</span>) NOPASSWD:<span class="hljs-literal">ALL</span><br></code></pre></td></tr></table></figure><h2 id="禁止root用户ssh登录"><a href="#禁止root用户ssh登录" class="headerlink" title="禁止root用户ssh登录"></a>禁止root用户ssh登录</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@Ubuntu:~]<span class="hljs-comment"># vim /etc/ssh/sshd_config</span><br></code></pre></td></tr></table></figure><p>将<code>PermitRootLogin yes</code>修改为<code>PermitRootLogin no</code>，保存之后重启ssh服务<code>service ssh restart</code>。</p><h2 id="修改ssh登录端口"><a href="#修改ssh登录端口" class="headerlink" title="修改ssh登录端口"></a>修改ssh登录端口</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@Ubuntu:~]<span class="hljs-comment"># vim /etc/ssh/sshd_config</span><br></code></pre></td></tr></table></figure><p>将<code>Port 22</code>修改为任意<code>1025~65535</code>直接的端口，保存之后重启ssh服务<code>service ssh restart</code>。</p>]]></content>
    
    
    <categories>
      
      <category>ubuntu</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ubuntu</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>yunzai-bot 部署</title>
    <link href="/2023/02/13/yunzai-bot%20%E9%83%A8%E7%BD%B2/"/>
    <url>/2023/02/13/yunzai-bot%20%E9%83%A8%E7%BD%B2/</url>
    
    <content type="html"><![CDATA[<h1 id="Docker-部署-yunzai-bot"><a href="#Docker-部署-yunzai-bot" class="headerlink" title="Docker 部署 yunzai-bot"></a>Docker 部署 yunzai-bot</h1><p>官方的部署文档：<a href="https://docs.yunzai.org/deploy/">部署说明 | 文档中心 (yunzai.org)</a></p><h2 id="本机部署"><a href="#本机部署" class="headerlink" title="本机部署"></a>本机部署</h2><p><a href="https://docs.yunzai.org/deploy/windows/local.html">本地手动部署 | 文档中心 (yunzai.org)</a></p><ul><li><p>环境</p><p>Redis，NodeJS(&gt;&#x3D;16)</p></li></ul><ol><li><p>克隆项目</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> https://gitee.com/Le-niao/Yunzai-Bot.git<br></code></pre></td></tr></table></figure></li><li><p>安装 pnmp</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install pnpm -g<br></code></pre></td></tr></table></figure></li><li><p>进入 <code>Yunzai-Bot</code> 文件夹，安装依赖</p> <figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">npm <span class="hljs-keyword">install</span> pnpm -g<br></code></pre></td></tr></table></figure></li><li><p>运行</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">node app<br></code></pre></td></tr></table></figure></li></ol><h2 id="Docker-部署"><a href="#Docker-部署" class="headerlink" title="Docker 部署"></a>Docker 部署</h2><blockquote><p>docker-compose 的部署官网就有，这里说个不使用 docker-compose 的</p></blockquote><ol><li><p>准备 <code>Redis</code> 环境</p><ul><li><p>拉取 <code>Redis</code> 镜像</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker pull redis<br></code></pre></td></tr></table></figure></li><li><p>准备 <code>Redis</code> 配置文件</p><p>  在官网可以获取，<a href="https://download.redis.io/redis-stable/redis.conf">https://download.redis.io/redis-stable/redis.conf</a></p><p>  将配置文件放入自定义路径，比如 <code>/root/redis/redis.conf</code></p></li><li><p>启动 <code>Redis</code> 容器</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker run --name redis -p 6379:6379 -v /root/redis/data:/data -v /root/redis/redis.conf:/etc/redis/redis.conf --restart=always --network yunzai-network -d redis redis-server /etc/redis/redis.conf<br></code></pre></td></tr></table></figure><p>  <code>--network yunzai-network</code> 指定该容器所在的网络，之后将机器人也放入该网络，就可以访问 <code>Redis</code> 了。</p></li></ul></li><li><p>拉取 <code>yunzai-bot</code> 镜像</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker pull sirly/yunzai-bot:v3<br></code></pre></td></tr></table></figure><blockquote><p>v2 v3 是机器人的版本，v3plus 是扩展版，附带 ffmpeg 环境和 Python 环境</p></blockquote></li><li><p>启动容器</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker run --name yunzai-bot -p 50831:50831 -v /root/yunzai-bot/config:/app/Yunzai-Bot/config/config/ -v /root/yunzai-bot/genshin_config:/app/Yunzai-Bot/plugins/genshin/config -v /root/yunzai-bot/logs:/app/Yunzai-Bot/logs -v /root/yunzai-bot/data:/app/Yunzai-Bot/data -e CUID=1000 -e CGID=1000 -d --restart=always --network yunzai-network sirly/yunzai-bot:v3<br></code></pre></td></tr></table></figure><p> 要将该容器和 <code>Redis</code> 容器放入同一个网路下，通过 <code>-network</code> 指定 <code>yunzai-network</code> </p><p> 映射的目录的功能如下：</p><p> <code>/app/Yunzai-Bot/config/config/</code> ：Bot 基础配置文件<br> <code>/app/Yunzai-Bot/plugins/genshin/config</code> ：公共Cookie，云崽功能配置文件<br> <code>/app/Yunzai-Bot/logs</code> ：日志文件<br> <code>/app/Yunzai-Bot/data</code> ：数据文件</p></li><li><p>启动机器人</p><p> 进入容器内部，在内部运行项目</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker <span class="hljs-built_in">exec</span> -it yunzai-bot sh<br><span class="hljs-comment"># 在内部运行项目</span><br>node app<br></code></pre></td></tr></table></figure></li></ol><h3 id="插件安装"><a href="#插件安装" class="headerlink" title="插件安装"></a>插件安装</h3><p>todo</p><h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><ol><li><p>机器人无法登录</p><p>如果是在服务器上进行部署的，因为服务器地址和所在地址不同，会导致登录失败，可以现在本地部署，之后将本地 <code>~/yunzai-bot/data/qq号/device-qq号.json</code> 的文件复制到服务器上，再次重新登录即可。</p></li><li><p>qq 版本过低</p><p>修改 <code>~/yunzai-bot/data/qq号/device-qq号.json</code> 中的 <code>imei</code>，可以随机更改，也可以用自己的手机拨号 <code>*#06#</code> 获取自己的 <code>imei</code> 进行替换，保存之后使用 <code>node app</code> 重新启动。</p></li><li><p>获取米游社 cookie</p><p>浏览器登录米游社之后，打开F12，刷新页面，找到 <code>https://www.miyoushe.com/ys/</code> 这个请求，将请求头中的 <code>cookie</code> 复制下来即可</p><p><code>cookie</code> 中应该包含有 <code>ltoken_v2</code>、<code>ltuid_v2</code>、<code>cookie_token_v2</code>、<code>account_mid_v2</code> 四个值</p></li></ol>]]></content>
    
    
    <categories>
      
      <category>docker</category>
      
    </categories>
    
    
    <tags>
      
      <tag>docker</tag>
      
      <tag>bot</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>PowerShell 7 安装 oh-my-posh</title>
    <link href="/2022/10/27/PowerShell%207%20%E5%AE%89%E8%A3%85%20oh-my-posh/"/>
    <url>/2022/10/27/PowerShell%207%20%E5%AE%89%E8%A3%85%20oh-my-posh/</url>
    
    <content type="html"><![CDATA[<h1 id="PowerShell-7-安装-oh-my-posh"><a href="#PowerShell-7-安装-oh-my-posh" class="headerlink" title="PowerShell 7 安装 oh-my-posh"></a>PowerShell 7 安装 oh-my-posh</h1><h2 id="下载-PowerShell-7"><a href="#下载-PowerShell-7" class="headerlink" title="下载 PowerShell 7"></a>下载 PowerShell 7</h2><p><a href="https://github.com/PowerShell/PowerShell">PowerShell&#x2F;PowerShell: PowerShell for every system! (github.com)</a></p><h2 id="安装-oh-my-posh"><a href="#安装-oh-my-posh" class="headerlink" title="安装 oh-my-posh"></a>安装 oh-my-posh</h2><blockquote><p>官方安装文档：<a href="https://ohmyposh.dev/docs/installation/windows">Windows | Oh My Posh</a></p></blockquote><p>下载安装 oh-my-posh</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">winget install JanDeDobbeleer.OhMyPosh -s winget<br></code></pre></td></tr></table></figure><blockquote><p>如果下载失败，启动代理，对以下网址进行代理</p><p>store-images.s-microsoft.com<br>microsoft.com</p></blockquote><p>或者</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">Set-ExecutionPolicy Bypass -Scope Process -Force; Invoke-Expression ((New-Object System.Net.WebClient).DownloadString(&#x27;https://ohmyposh.dev/install.ps1&#x27;))<br></code></pre></td></tr></table></figure><p>这将安装一个应用程序 <code>oh-my-posh.exe</code> 以及一个最新的主题。</p><blockquote><p>安装之后可以通过 <code>(Get-Command oh-my-posh).Source</code> 显示 <code>oh-my-posh.exe</code>的局对路径， 来检验是否安装成功</p></blockquote><h3 id="使用-oh-my-posh"><a href="#使用-oh-my-posh" class="headerlink" title="使用 oh-my-posh"></a>使用 oh-my-posh</h3><blockquote><p>官方文档：<a href="https://ohmyposh.dev/docs/installation/prompt">Change your prompt | Oh My Posh</a></p></blockquote><p>配置 PowerShell 使用 oh-my-posh，并为 PowerShell 添加自动补全</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">notepad <span class="hljs-variable">$PROFILE</span><br></code></pre></td></tr></table></figure><p>使用记事本打开配置文件，向其中添加</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">oh-my-posh init pwsh | Invoke-Expression<br></code></pre></td></tr></table></figure><p>之后重新加载配置文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">. <span class="hljs-variable">$PROFILE</span><br></code></pre></td></tr></table></figure><blockquote><p>相关配置文件及模块都存放在 <code>~\Documents\PowerShell</code> 下</p><p>如果提示找不到路径，输入 <code>$PROFILE</code> ，在路径下创建该文件，再在文件中添加以上信息</p></blockquote><h3 id="安装字体"><a href="#安装字体" class="headerlink" title="安装字体"></a>安装字体</h3><blockquote><p>官方文档：<a href="https://ohmyposh.dev/docs/installation/fonts">Fonts | Oh My Posh</a></p></blockquote><p>oh-my-posh 需要下载适配的字体，否则会出现乱码，所以得先安装类似 <a href="https://github.com/powerline/fonts">Powerline Fonts</a> 这样的第三方字体，这样才会没有乱码</p><p>PowerLine 字体为一些特殊形状提供支持(比如箭头、Git 标志、苹果 &#x2F; Ubuntu 标志之类的)</p><p>官方推荐 <a href="https://github.com/ryanoasis/nerd-fonts/releases/download/v2.1.0/Meslo.zip">Meslo LGM NF</a> 字体，下载压缩包解压之后，全选右键安装，打开 Terminal 的设置文件，更改字体</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;profiles&quot;</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;defaults&quot;</span><span class="hljs-punctuation">:</span><br>        <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;font&quot;</span><span class="hljs-punctuation">:</span><br>            <span class="hljs-punctuation">&#123;</span><br>                <span class="hljs-attr">&quot;face&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;MesloLGM NF&quot;</span><br>            <span class="hljs-punctuation">&#125;</span><br>        <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>或者直接在 Terminal 的设置-配置文件-默认值-外观中修改对应的字体。</p><blockquote><p>标准 PowerLine 字体包含的特殊图标并不多，如果需要使用包含更多图标的终端，可以使用 <a href="https://github.com/ryanoasis/nerd-fonts/releases/">Hack Nerd Font</a>，可以兼容更多的图标</p><p>可以在 <a href="https://www.nerdfonts.com/font-downloads">Nerd Fonts</a> 下载字体，推荐 <a href="https://github.com/ryanoasis/nerd-fonts/releases/download/v2.3.3/JetBrainsMono.zip">JetBrains Mono Nerd Font</a></p></blockquote><h3 id="自定义主题"><a href="#自定义主题" class="headerlink" title="自定义主题"></a>自定义主题</h3><blockquote><p>官方文档：<a href="https://ohmyposh.dev/docs/installation/customize">Customize | Oh My Posh</a></p><p>官方提供的主题：<a href="https://ohmyposh.dev/docs/themes">Themes | Oh My Posh</a></p></blockquote><ol><li><p>在官方提供的主题中找到一个喜欢的，复制名字</p></li><li><p>打开配置文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">notepad <span class="hljs-variable">$PROFILE</span><br></code></pre></td></tr></table></figure></li><li><p>更改原本的 <code>init</code> 行，更改主题为 <code>dracula</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">oh-my-posh init pwsh --config <span class="hljs-string">&quot;<span class="hljs-variable">$env</span>:POSH_THEMES_PATH\dracula.omp.json&quot;</span> | Invoke-Expression<br></code></pre></td></tr></table></figure><ul><li>这里的 <code>$env:POSH_THEMES_PATH</code> 指向 oh-my-posh 的预置主题目录，默认是 <code>~\AppData\Local\Programs\oh-my-posh\themes</code></li><li>如果需要更换主题，将主题名替换一下就可以了</li></ul></li><li><p>重新加载配置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">. <span class="hljs-variable">$PROFILE</span><br></code></pre></td></tr></table></figure></li></ol><p><strong>配置完后</strong>，每次打开 Windows Terminal 中的 Power shell 都会执行配置文件中的命令，也可以将其指向一个 url，这样每次打开就会通过 url 来访问配置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">oh-my-posh init pwsh --config <span class="hljs-string">&#x27;https://raw.githubusercontent.com/JanDeDobbeleer/oh-my-posh/main/themes/dracula.omp.json&#x27;</span> | Invoke-Expression<br></code></pre></td></tr></table></figure><p>导出主题</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">oh-my-posh config <span class="hljs-built_in">export</span> --output ~/.mytheme.omp.json<br></code></pre></td></tr></table></figure><h3 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h3><p>更新 oh-my-posh 可以使用</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">winget upgrade JanDeDobbeleer.OhMyPosh -s winget<br></code></pre></td></tr></table></figure><p>或者</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">Set-ExecutionPolicy Bypass -Scope Process -Force; Invoke-Expression ((New-Object System.Net.WebClient).DownloadString(&#x27;https://ohmyposh.dev/install.ps1&#x27;))<br></code></pre></td></tr></table></figure><h2 id="安装-posh-git"><a href="#安装-posh-git" class="headerlink" title="安装 posh-git"></a>安装 posh-git</h2><p><a href="https://github.com/dahlbyk/posh-git">Posh-Git</a> 是一个 PowerShell 模块，它通过提供可在 PowerShell 提示符中显示的 Git 状态摘要信息来集成 Git 和 PowerShell。</p><blockquote><p>在 Windows 上，脚本执行策略必须设置为 <code>RemoteSigned</code> 或 <code>Unrestricted</code>。</p><p>通过执行 <code>Get-ExecutionPolicy</code> 来检查脚本执行策略设置。如果策略未设置为两个必需值之一，需要以管理员身份运行 PowerShell 并执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">Set-ExecutionPolicy RemoteSigned -Scope CurrentUser -Confirm<br></code></pre></td></tr></table></figure></blockquote><ol><li><p>安装 posh-git</p><p>如果是第一次安装 posh-git，执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">Install-Module posh-git -Scope CurrentUser -Force<br></code></pre></td></tr></table></figure><p>如果已经安装过了，执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">Update-Module posh-git<br></code></pre></td></tr></table></figure></li><li><p>修改配置文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">notepad <span class="hljs-variable">$PROFILE</span><br></code></pre></td></tr></table></figure><p>添加以下内容，来导入 post-git</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">Import-Module posh-git<br></code></pre></td></tr></table></figure><p>重新加载配置文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">. <span class="hljs-variable">$PROFILE</span><br></code></pre></td></tr></table></figure></li><li><p>解决中文乱码</p><p>在系统环境变量中新建变量：<code>LESSCHARSET</code> 为 <code>utf-8</code></p></li></ol><h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 导入oh-my-posh 并指向主题</span><br>oh-my-posh init pwsh --config <span class="hljs-string">&quot;<span class="hljs-variable">$env</span>:POSH_THEMES_PATH\dracula.omp.json&quot;</span> | Invoke-Expression<br><span class="hljs-comment"># 导入posh-git</span><br>Import-Module posh-git<br></code></pre></td></tr></table></figure><h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><p><a href="https://ohmyposh.dev/docs/installation/windows">Windows | Oh My Posh</a></p><p><a href="https://github.com/dahlbyk/posh-git">dahlbyk&#x2F;posh-git: A PowerShell environment for Git (github.com)</a></p><p><a href="https://lamirs.vercel.app/index-powershell">powershell 美化 | Lamirs ☆ Blog</a></p>]]></content>
    
    
    <categories>
      
      <category>windows</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PowerShell</tag>
      
      <tag>oh-my-posh</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SSH 自动断开连接</title>
    <link href="/2022/05/17/SSH%20%E8%87%AA%E5%8A%A8%E6%96%AD%E5%BC%80%E8%BF%9E%E6%8E%A5/"/>
    <url>/2022/05/17/SSH%20%E8%87%AA%E5%8A%A8%E6%96%AD%E5%BC%80%E8%BF%9E%E6%8E%A5/</url>
    
    <content type="html"><![CDATA[<h3 id="SSH-自动断开连接"><a href="#SSH-自动断开连接" class="headerlink" title="SSH 自动断开连接"></a>SSH 自动断开连接</h3><p>ssh 连接服务器，一段时间不进行操作后会自动断开连接，可以修改 ssh 配置延长心跳间隔时间。</p><h4 id="更改服务端配置"><a href="#更改服务端配置" class="headerlink" title="更改服务端配置"></a>更改服务端配置</h4><p>以  Ubuntu 20.04 为例。</p><p>修改服务端配置，以本机当作 ssh 连接的对象。</p><ol><li><p>修改 ssh 服务端配置文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">vim /etc/ssh/sshd_config<br></code></pre></td></tr></table></figure><p>添加以下内容：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-comment"># 服务器端向客户端发送心跳的时间间隔</span><br><span class="hljs-attr">ClientAliveInterval</span> <span class="hljs-string">30</span><br><span class="hljs-comment"># 超过多少次心跳没有响应，就断开连接</span><br><span class="hljs-attr">ClientAliveCountMax</span> <span class="hljs-string">10</span><br></code></pre></td></tr></table></figure><blockquote><p>这两个选项默认是关闭的，且关闭的 ClientAliveInterval 默认值是 0，ClientAliveCountMax 默认值是 3，意味着 ssh 连接闲置之后就会被关闭。</p></blockquote></li><li><p>重启 ssh 服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">service ssh restart<br></code></pre></td></tr></table></figure></li></ol><h4 id="更改客户端配置"><a href="#更改客户端配置" class="headerlink" title="更改客户端配置"></a>更改客户端配置</h4><p>修改客户端配置，以本机当作发起 ssh 连接其他主机的对象。</p><h5 id="Linux-客户端"><a href="#Linux-客户端" class="headerlink" title="Linux 客户端"></a>Linux 客户端</h5><ol><li><p>修改 ssh 客户端配置文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">vim /etc/ssh/ssh_config<br></code></pre></td></tr></table></figure><p>添加以下内容：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-comment"># 客户端向服务器端发送心跳的时间间隔</span><br><span class="hljs-attr">ServerAliveInterval</span> <span class="hljs-string">30</span><br><span class="hljs-comment"># 超过多少次心跳没有响应，就断开连接</span><br><span class="hljs-attr">ServerAliveCountMax</span> <span class="hljs-string">10</span><br></code></pre></td></tr></table></figure></li><li><p>重启 ssh 服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">service ssh restart<br></code></pre></td></tr></table></figure></li></ol><h5 id="Windows-终端"><a href="#Windows-终端" class="headerlink" title="Windows 终端"></a>Windows 终端</h5><p>以 Windows Terminal 为例。</p><ul><li><p>每次连接时添加 ServerAliveInterval 参数。也就是客户端向服务器端发送心跳的时间间隔。如</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ssh -o ServerAliveInterval=1800 user@ip<br></code></pre></td></tr></table></figure><p>设置心跳间隔为 30min。</p></li></ul><h4 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h4><p>ClientAliveInterval、ClientAliveCountMax、ServerAliveInterval、ServerAliveCountMax 这些参数指定的是发送心跳包之后，如果没有响应，才会断开，意味着这是为了断开空闲的 ssh 连接，但是很难认为 ssh 连接空闲，可能需要没有 IO 活动、没有 CPU 消耗等。</p><p>所以这几个选项并不能设置连接超时，只能防止 ssh 连接被关闭，所以使用了这些参数之后还是需要手动关闭。</p><p><a href="https://bbs.archlinux.org/viewtopic.php?id=254707">SSH server does not timeout the client &#x2F; Newbie Corner &#x2F; Arch Linux Forums</a></p><p><a href="https://stackoverflow.com/questions/71174746/clientaliveinterval-is-not-closing-the-idle-connection">ssh - ClientAliveInterval is not closing the idle connection - Stack Overflow</a></p>]]></content>
    
    
    <categories>
      
      <category>linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>byte[] 转换 int</title>
    <link href="/2022/04/28/byte%5B%5D%20%E8%BD%AC%E6%8D%A2%20int/"/>
    <url>/2022/04/28/byte%5B%5D%20%E8%BD%AC%E6%8D%A2%20int/</url>
    
    <content type="html"><![CDATA[<h3 id="byte-转换-int"><a href="#byte-转换-int" class="headerlink" title="byte[] 转换 int"></a>byte[] 转换 int</h3><p>1byte 是 8bit，1int 是 4byte、32bit，在 byte[] 中取出 int 类型，需要取第一个 byte 以及向后顺延 3byte，一共 32bit，再转化成 int 类型。</p><p>Java 对 char，byte 或者 short 进行移位处理时，会先自动转换成 int 类型，也就是会在 char，byte 或者 short 的前面补上  0，直到达到 32bit。</p><p>如 <code>byte[]&#123;1,2,3,4&#125;</code> 的二进制就是 <code>[00000001,00000010,00000011,00000100]</code>，其中索引 0 处的 int 整数就是 <code>00000001 00000010 00000011 00000100</code>，也就是 <code>16909060</code>。</p><p>要将 byte[] 转换成 int，需要对其进行移位，byte[0] 左移 24 位，使其成为 32bit int 的第 0~7bit，同理，byte[1]、byte[2]、byte[3] 分别成为 int 的第 8-15bit、16-23bit、24-31bit。</p><p><code>&amp; 0xFF</code>是为了得到低 8 位。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getInt</span><span class="hljs-params">(<span class="hljs-type">int</span> index)</span> &#123;<br>    <span class="hljs-type">byte</span> <span class="hljs-variable">first</span> <span class="hljs-operator">=</span> source[index];<br>    <span class="hljs-type">byte</span> <span class="hljs-variable">second</span> <span class="hljs-operator">=</span> source[index + <span class="hljs-number">1</span>];<br>    <span class="hljs-type">byte</span> <span class="hljs-variable">third</span> <span class="hljs-operator">=</span> source[index + <span class="hljs-number">2</span>];<br>    <span class="hljs-type">byte</span> <span class="hljs-variable">forth</span> <span class="hljs-operator">=</span> source[index + <span class="hljs-number">3</span>];<br>    <span class="hljs-keyword">return</span> (first &amp; <span class="hljs-number">0xFF</span>) &lt;&lt; <span class="hljs-number">24</span><br>        | (second &amp; <span class="hljs-number">0xFF</span>) &lt;&lt; <span class="hljs-number">16</span><br>        | (third &amp; <span class="hljs-number">0xFF</span>) &lt;&lt; <span class="hljs-number">8</span><br>        | (forth &amp; <span class="hljs-number">0xFF</span>);<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Docker 解锁网易云音乐</title>
    <link href="/2022/04/26/Docker%20%E8%A7%A3%E9%94%81%E7%BD%91%E6%98%93%E4%BA%91%E9%9F%B3%E4%B9%90/"/>
    <url>/2022/04/26/Docker%20%E8%A7%A3%E9%94%81%E7%BD%91%E6%98%93%E4%BA%91%E9%9F%B3%E4%B9%90/</url>
    
    <content type="html"><![CDATA[<h3 id="Docker-解锁网易云音乐"><a href="#Docker-解锁网易云音乐" class="headerlink" title="Docker 解锁网易云音乐"></a>Docker 解锁网易云音乐</h3><blockquote><p>docker 解锁网易云客户端灰色 music</p></blockquote><p>[解锁网易云客户端灰色 music](<a href="https://github.com/UnblockNeteaseMusic/server">UnblockNeteaseMusic&#x2F;server: Revive unavailable songs for Netease Cloud Music (Refactored &amp; Enhanced version) (github.com)</a>)</p><h4 id="1-服务器启动镜像"><a href="#1-服务器启动镜像" class="headerlink" title="1. 服务器启动镜像"></a>1. 服务器启动镜像</h4><p>docker 拉取镜像</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker pull pan93412/unblock-netease-music-enhanced<br></code></pre></td></tr></table></figure><p>docker 运行容器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker run --name unblock-netease-music-enhanced -d -p 8888:8080 --restart=always pan93412/unblock-netease-music-enhanced -s -e https://music.163.com<br></code></pre></td></tr></table></figure><ul><li>-s 开启严格模式，若将服务部署到公网，强烈建议使用严格模式 (此模式下仅放行网易云音乐所属域名的请求)</li></ul><p>如果需要开启使用无损音质，开启黑胶 vip，可以通过 -e 传入环境变量：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker run --name unblock-netease-music-enhanced -d -p 8888:8080 -e ENABLE_LOCAL_VIP=<span class="hljs-literal">true</span> -e ENABLE_FLAC=<span class="hljs-literal">true</span> pan93412/unblock-netease-music-enhanced -s -e https://music.163.com --restart=always <br></code></pre></td></tr></table></figure><ul><li>ENABLE_LOCAL_VIP&#x3D;true 激活本地黑胶 VIP</li><li>ENABLE_FLAC&#x3D;true 激活无损音质获取</li></ul><blockquote><p>获取无损音质会导致服务器的内存占用变高</p></blockquote><p>可以启动时添加 NO_CACHE 参数，停用服务器缓存</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">-e <span class="hljs-attribute">NO_CACHE</span>=<span class="hljs-literal">true</span> <br></code></pre></td></tr></table></figure><h4 id="2-本地机器配置"><a href="#2-本地机器配置" class="headerlink" title="2. 本地机器配置"></a>2. 本地机器配置</h4><p>Windows 下在网易云客户端的设置→工具→http代理中，选择自定义代理，将服务器 ip 和端口填入，确定后重启客户端，即可使用。</p><h4 id="3-更新"><a href="#3-更新" class="headerlink" title="3. 更新"></a>3. 更新</h4><p>若要更新 UnblockNeteaseMusic，运行以下命令后重新 run：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker pull pan93412/unblock-netease-music-enhanced<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>docker</category>
      
    </categories>
    
    
    <tags>
      
      <tag>docker</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Docker 常用命令</title>
    <link href="/2022/04/21/Docker%20%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <url>/2022/04/21/Docker%20%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
    
    <content type="html"><![CDATA[<h2 id="docker-常用命令"><a href="#docker-常用命令" class="headerlink" title="docker 常用命令"></a>docker 常用命令</h2><h3 id="1-docker-配置镜像源"><a href="#1-docker-配置镜像源" class="headerlink" title="1. docker 配置镜像源"></a>1. docker 配置镜像源</h3><p>配置 ustc 镜像源</p><p>在 <code>/etc/docker/daemon.json</code> 中添加</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;registry-mirrors&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-string">&quot;https://docker.mirrors.ustc.edu.cn/&quot;</span><span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>之后 <code>systemctl restart docker</code> 重启 docker</p><h3 id="2-docker-搜索镜像"><a href="#2-docker-搜索镜像" class="headerlink" title="2. docker 搜索镜像"></a>2. docker 搜索镜像</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker search redis<br></code></pre></td></tr></table></figure><h3 id="3-docker-拉取镜像"><a href="#3-docker-拉取镜像" class="headerlink" title="3. docker 拉取镜像"></a>3. docker 拉取镜像</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker pull redis <span class="hljs-comment"># 默认拉取最新版本</span><br>docker pull redis:latest<br>docker pull redis:version<br></code></pre></td></tr></table></figure><h3 id="4-docker-显示已经安装的镜像"><a href="#4-docker-显示已经安装的镜像" class="headerlink" title="4. docker 显示已经安装的镜像"></a>4. docker 显示已经安装的镜像</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker images<br></code></pre></td></tr></table></figure><h3 id="5-docker-删除已经安装的镜像"><a href="#5-docker-删除已经安装的镜像" class="headerlink" title="5. docker 删除已经安装的镜像"></a>5. docker 删除已经安装的镜像</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker rmi imageId<br></code></pre></td></tr></table></figure><h3 id="6-docker-运行容器"><a href="#6-docker-运行容器" class="headerlink" title="6. docker 运行容器"></a>6. docker 运行容器</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker run [OPTIONS] IMAGE[:TAG|@DIGEST] [COMMAND] [ARG...]<br></code></pre></td></tr></table></figure><p>docker run的额外参数</p><ul><li><p>–name 给当前运行的容器起一个名字</p><p><code>docker run --name mytomcat -d tomcat</code></p></li><li><p>-d 后台运行容器</p></li><li><p>-p 用于端口映射</p><blockquote><p>-p src:dest</p><p>src 为物理主机端口，dest 为容器的端口</p><p>-p 8888:9999 就是将物理主机的 8888 端口映射到容器的 9999 端口，这样就可以通过访问物理主机的 8888 端口来访问容器的 9999 端口了</p></blockquote></li></ul><h3 id="7-docker-查看正在运行的容器"><a href="#7-docker-查看正在运行的容器" class="headerlink" title="7. docker 查看正在运行的容器"></a>7. docker 查看正在运行的容器</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker ps [ARG...]<br></code></pre></td></tr></table></figure><h3 id="8-docker-停止正在运行的容器"><a href="#8-docker-停止正在运行的容器" class="headerlink" title="8. docker 停止正在运行的容器"></a>8. docker 停止正在运行的容器</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker stop containerId <br></code></pre></td></tr></table></figure><h3 id="9-docker-启动容器"><a href="#9-docker-启动容器" class="headerlink" title="9. docker 启动容器"></a>9. docker 启动容器</h3><p>run 是从镜像创建一个新容器启动，start 是启动已经存在的容器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker start containerId<br></code></pre></td></tr></table></figure><h3 id="10-docker-删除容器"><a href="#10-docker-删除容器" class="headerlink" title="10. docker 删除容器"></a>10. docker 删除容器</h3><p>只删除容器，不删除镜像</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker <span class="hljs-built_in">rm</span> containerId<br></code></pre></td></tr></table></figure><h3 id="11-docker-查看容器启动的日志"><a href="#11-docker-查看容器启动的日志" class="headerlink" title="11. docker 查看容器启动的日志"></a>11. docker 查看容器启动的日志</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker logs containerId<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>docker</category>
      
    </categories>
    
    
    <tags>
      
      <tag>docker</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
